[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nhow to do ML and RL 을 해봅니다. 테스팅\n추가 테스트"
  },
  {
    "objectID": "Me.html",
    "href": "Me.html",
    "title": "Me",
    "section": "",
    "text": "소개 내용"
  },
  {
    "objectID": "Me.html#부제목-작성-예정",
    "href": "Me.html#부제목-작성-예정",
    "title": "Me",
    "section": "부제목 작성 예정",
    "text": "부제목 작성 예정\n세부내용 작성 예정"
  },
  {
    "objectID": "Task.html",
    "href": "Task.html",
    "title": "Task",
    "section": "",
    "text": "Me\n\n\n\n\n\n\njhs\n\n\nWednesday, April 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Tutorial : Hello, Quarto\n\n\n\n\n\n\njhs\n\n\nWednesday, April 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Tutorial : Compuations\n\n\n\n\n\n\njhs\n\n\nWednesday, April 10, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "matplotlib demo.html",
    "href": "matplotlib demo.html",
    "title": "Quarto Tutorial : Hello, Quarto",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "기본 페이지 입니다.",
    "section": "",
    "text": "아직 내용이 없습니다."
  },
  {
    "objectID": "computations.html",
    "href": "computations.html",
    "title": "Quarto Tutorial : Compuations",
    "section": "",
    "text": "import numpy as np\na = np.arange(15).reshape(3, 5)\na\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])"
  },
  {
    "objectID": "computations.html#numpy",
    "href": "computations.html#numpy",
    "title": "Quarto Tutorial : Compuations",
    "section": "",
    "text": "import numpy as np\na = np.arange(15).reshape(3, 5)\na\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])"
  },
  {
    "objectID": "computations.html#matplotlib",
    "href": "computations.html#matplotlib",
    "title": "Quarto Tutorial : Compuations",
    "section": "Matplotlib",
    "text": "Matplotlib\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)"
  },
  {
    "objectID": "computations.html#plotly",
    "href": "computations.html#plotly",
    "title": "Quarto Tutorial : Compuations",
    "section": "Plotly",
    "text": "Plotly\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()"
  }
]